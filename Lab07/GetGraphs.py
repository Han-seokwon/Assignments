from Graph import *
from SearchGraph import *
class GetGraphs:
    def getG1(self): # unweighted graph
        g = Graph(False)
        v1 = Vertex("A")
        v2 = Vertex("B")
        v3 = Vertex("C")
        v4 = Vertex("D")
        v5 = Vertex("E")
        v6 = Vertex("F")
        v7 = Vertex("G")
        v8 = Vertex("H")

        g.addVertex(v1)
        g.addVertex(v2)
        g.addVertex(v3)
        g.addVertex(v4)
        g.addVertex(v5)
        g.addVertex(v6)
        g.addVertex(v7)
        g.addVertex(v8)


        e1 = Edge(v1, v2, 1)
        e2 = Edge(v1, v3, 1)
        e3 = Edge(v2, v4, 1)
        e4 = Edge(v3, v4, 1)
        e5 = Edge(v3, v5, 1)
        e6 = Edge(v4, v6, 1)
        e7 = Edge(v5, v7, 1)
        e8 = Edge(v5, v8, 1)
        e9 = Edge(v7, v8, 1)

        g.addEdge(e1)
        g.addEdge(e2)
        g.addEdge(e3)
        g.addEdge(e4)
        g.addEdge(e5)
        g.addEdge(e6)
        g.addEdge(e7)
        g.addEdge(e8)
        g.addEdge(e9)
        return g

    def getG2(self): # weighted graph
        g = Graph(False)
        v1 = Vertex("A")
        v2 = Vertex("B")
        v3 = Vertex("C")
        v4 = Vertex("D")
        v5 = Vertex("E")
        v6 = Vertex("F")
        v7 = Vertex("G")
        v8 = Vertex("H")

        g.addVertex(v1)
        g.addVertex(v2)
        g.addVertex(v3)
        g.addVertex(v4)
        g.addVertex(v5)
        g.addVertex(v6)
        g.addVertex(v7)
        g.addVertex(v8)

        e1 = Edge(v1, v2, 10)
        e2 = Edge(v1, v3, 2)
        e3 = Edge(v2, v4, 4)
        e4 = Edge(v3, v4, 2)
        e5 = Edge(v3, v5, 24)
        e6 = Edge(v4, v6, 7)
        e7 = Edge(v5, v7, 45)
        e8 = Edge(v5, v8, 23)
        e9 = Edge(v7, v8, 11)

        g.addEdge(e1)
        g.addEdge(e2)
        g.addEdge(e3)
        g.addEdge(e4)
        g.addEdge(e5)
        g.addEdge(e6)
        g.addEdge(e7)
        g.addEdge(e8)
        g.addEdge(e9)
        return g

    def getG3(self):
        g = Graph(True)
        v1 = Vertex("1")
        v2 = Vertex("2")
        v3 = Vertex("3")
        v4 = Vertex("4")
        v5 = Vertex("5")

        g.addVertex(v1)
        g.addVertex(v2)
        g.addVertex(v3)
        g.addVertex(v4)
        g.addVertex(v5)

        e1 = Edge(v1, v2, 1)
        e2 = Edge(v1, v3, 1)
        e3 = Edge(v2, v4, 1)
        e4 = Edge(v2, v5, 1)
        e5 = Edge(v3, v4, 1)
        e6 = Edge(v4, v5, 1)

        g.addEdge(e1)
        g.addEdge(e2)
        g.addEdge(e3)
        g.addEdge(e4)
        g.addEdge(e5)
        g.addEdge(e6)

        return g

    def getG4_TestConnectedComponents(self):  # unweighted graph
        sg = SearchGraph()
        g = Graph(False)
        v1 = Vertex("A")
        v2 = Vertex("B")
        v3 = Vertex("C")
        v4 = Vertex("D")
        v5 = Vertex("E")
        v6 = Vertex("F")
        v7 = Vertex("G")
        v8 = Vertex("H")

        g.addVertex(v1)
        sg.findCC(g.getAdjList())
        g.addVertex(v2)
        g.addVertex(v3)
        g.addVertex(v4)
        g.addVertex(v5)
        g.addVertex(v6)
        g.addVertex(v7)
        sg.findCC(g.getAdjList())
        g.addVertex(v8)

        sg.findCC(g.getAdjList())

        e1 = Edge(v1, v2, 1)
        e2 = Edge(v1, v3, 1)
        e3 = Edge(v2, v4, 1)
        e4 = Edge(v3, v4, 1)
        e5 = Edge(v3, v5, 1)
        e6 = Edge(v4, v6, 1)
        e7 = Edge(v5, v7, 1)
        e8 = Edge(v5, v8, 1)
        e9 = Edge(v7, v8, 1)

        g.addEdge(e1)
        g.addEdge(e2)
        g.addEdge(e3)
        g.addEdge(e4)
        g.addEdge(e5)
        sg.findCC(g.getAdjList())

        g.addEdge(e6)

        g.addEdge(e7)
        g.addEdge(e8)
        g.addEdge(e9)
        return g

    def getG5(self):  # Kruskal, Prim
        g = Graph(False)

        A = Vertex("A")
        B = Vertex("B")
        C = Vertex("C")
        D = Vertex("D")
        E = Vertex("E")
        F = Vertex("F")
        G = Vertex("G")

        g.addVertex(A)
        g.addVertex(B)
        g.addVertex(C)
        g.addVertex(D)
        g.addVertex(E)
        g.addVertex(F)
        g.addVertex(G)

        e1 = Edge(A, B, 29)
        e2 = Edge(A, F, 10)
        e3 = Edge(B, C, 16)
        e4 = Edge(B, G, 15)
        e5 = Edge(C, D, 12)
        e6 = Edge(D, G, 18)
        e7 = Edge(D, E, 22)
        e8 = Edge(E, F, 27)
        e9 = Edge(E, G, 25)

        g.addEdge(e1)
        g.addEdge(e2)
        g.addEdge(e3)
        g.addEdge(e4)
        g.addEdge(e5)
        g.addEdge(e6)
        g.addEdge(e7)
        g.addEdge(e8)
        g.addEdge(e9)
        return g

    def getG6(self):  # weighted graph
        g = Graph(True)
        v1 = Vertex("A")
        v2 = Vertex("B")
        v3 = Vertex("C")
        v4 = Vertex("D")
        v5 = Vertex("E")
        v6 = Vertex("F")
        v7 = Vertex("G")
        v8 = Vertex("H")

        g.addVertex(v1)
        g.addVertex(v2)
        g.addVertex(v3)
        g.addVertex(v4)
        g.addVertex(v5)
        g.addVertex(v6)
        g.addVertex(v7)
        g.addVertex(v8)

        e1 = Edge(v1, v2, 10)
        e2 = Edge(v1, v3, 2)
        e3 = Edge(v2, v4, 4)
        e4 = Edge(v3, v4, 2)
        e5 = Edge(v3, v5, 24)
        e6 = Edge(v4, v6, 7)
        e7 = Edge(v5, v7, 45)
        e8 = Edge(v5, v8, 23)
        e9 = Edge(v7, v8, 11)

        g.addEdge(e1)
        g.addEdge(e2)
        g.addEdge(e3)
        g.addEdge(e4)
        g.addEdge(e5)
        g.addEdge(e6)
        g.addEdge(e7)
        g.addEdge(e8)
        g.addEdge(e9)
        return g